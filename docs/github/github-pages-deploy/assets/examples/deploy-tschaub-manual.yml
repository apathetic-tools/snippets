# Pushing from one repo to another repo or server 
#  - using tschaub/gh-pages with manual SSH configuration
# Deploy inspired by Apathetic Tools · MIT
# - https://github.com/apathetic-tools/snippets/blob/main/docs/github/github-pages-deploy
# - https://maxschmitt.me/posts/github-actions-ssh-key
# - tschaub/gh-pages https://github.com/tschaub/gh-pages

#########################################################
## !!! BROKEN EXAMPLE — Draft starting point only !!! ##
#########################################################

name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: [ main ]
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Allow this job to clone the repo and create a page deployment
# We only need read because ssh deploy key will have the write at the destination.
# If using `actions/deploy-pages` and `GITHUB_TOKEN`  to deploy to branch on the same repo you need write.
permissions:
  contents: read
  # pages: write # since we are ssh pushing, don't need this
  # id-token: write # since we are ssh pushing, don't need this

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    runs-on: ubuntu-latest    
    # If you stored the secret in the environment
    environment: github-pages
    steps:
      - name: Checkout your repository using git
        uses: actions/checkout@v4
      - name: Set up SSH
        run: |
                  mkdir -p ~/.ssh
                  ssh-keyscan github.com >> ~/.ssh/known_hosts

                  # Write deploy key (preserve newlines)
                  echo "${ACTIONS_DEPLOY_KEY}" > ~/.ssh/github_actions
                  chmod 600 ~/.ssh/github_actions
                  
                  # Validate the key, keep this check for future changes
                  ssh-keygen -y -f ~/.ssh/github_actions > /dev/null || {
                    echo "❌ Invalid private key"; exit 1;
                  }

                  # Start agent and add key
                  eval "$(ssh-agent -s)"
                  ssh-add ~/.ssh/github_actions
        env:          
          ACTIONS_DEPLOY_KEY: ${{ secrets.ACTIONS_DEPLOY_KEY }}
      - name: Show loaded SSH keys
        run: |
          # Debug check, can remove once things are working
          ssh-add -l -E sha256
        env:
          SSH_AUTH_SOCK: ${{ env.SSH_AUTH_SOCK }}
      - name: Debug key fingerprint
        run: |
          # Debug check, can remove once things are working
          ssh-keygen -y -f ~/.ssh/github_actions | ssh-keygen -lf -
        env:
          SSH_AUTH_SOCK: ${{ env.SSH_AUTH_SOCK }}
      - name: Configure Git for SSH
        run: |
          git config --global user.email "support+actions@github.com"
          git config --global user.name "github-actions-bot"

          # notice github.com: not github.com/ for ssh url
          git remote set-url origin git@github.com:<user/org>/<destination repo, likely someorg.github.io>.git

          # Debug check, can remove once things are working: Should show the SSH URL
          git remote -v
        env:
          SSH_AUTH_SOCK: ${{ env.SSH_AUTH_SOCK }}
      - name: Test SSH access
        run: |
          # Debug check, can remove once things are working
          #  - should display: Hi ...! You've successfully authenticated, but GitHub does not provide shell access.
          ssh -T git@github.com || true
        env:
          SSH_AUTH_SOCK: ${{ env.SSH_AUTH_SOCK }}
      - name: Deploy to GitHub Pages
        id: deployment
        run: |
          # Debug check: Notice debug flag here that can be removed when things are working.
          NODE_DEBUG=gh-pages npx gh-pages --dist <source of files to push dist/build/etc> --branch <destination branch>
        env:
          SSH_AUTH_SOCK: ${{ env.SSH_AUTH_SOCK }}
        if: ${{ github.ref == 'refs/heads/main' }} # only deploy if main branch saw a change